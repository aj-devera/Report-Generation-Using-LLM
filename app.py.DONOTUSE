# app.py
from flask import Flask, request, render_template, send_file
from werkzeug.utils import secure_filename
import os
from langchain_openai import ChatOpenAI
from langchain.document_loaders import PyPDFLoader
from langchain.chains.summarize import load_summarize_chain
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
import tempfile
from dotenv import load_dotenv

app = Flask(__name__)

# Configure upload folder and allowed extensions
UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'pdf'}

# Load the environment variable set
load_dotenv()

if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def generate_report(input_files):
    # Initialize OpenAI LLM
    llm = ChatOpenAI(
        api_key=os.getenv('OPENAI_API_KEY'),
        model="gpt-3.5-turbo",
        temperature=0.7
    )
    
    # Process each PDF file
    combined_text = []
    for file in input_files:
        loader = PyPDFLoader(file)
        pages = loader.load_and_split()
        combined_text.extend(pages)
    
    # Create and run the summarization chain
    chain = load_summarize_chain(llm, chain_type="map_reduce")
    summary = chain.run(combined_text)
    
    # Generate PDF report
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
    c = canvas.Canvas(temp_file.name, pagesize=letter)
    
    # Write content to PDF
    y = 750  # Starting y position
    for line in summary.split('\n'):
        if y < 50:  # Check if we need a new page
            c.showPage()
            y = 750
        c.drawString(50, y, line)
        y -= 15
    
    c.save()
    return temp_file.name

@app.route('/', methods=['GET'])
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'files[]' not in request.files:
        return 'No file part', 400
    
    files = request.files.getlist('files[]')
    uploaded_files = []
    
    for file in files:
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(filepath)
            uploaded_files.append(filepath)
    
    if not uploaded_files:
        return 'No valid files uploaded', 400
    
    try:
        report_path = generate_report(uploaded_files)
        return send_file(report_path, as_attachment=True, download_name='generated_report.pdf')
    except Exception as e:
        return str(e), 500
    finally:
        # Clean up uploaded files
        for filepath in uploaded_files:
            if os.path.exists(filepath):
                os.remove(filepath)

if __name__ == '__main__':
    app.run(debug=True)